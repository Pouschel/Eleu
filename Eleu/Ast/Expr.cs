// This file was generated by a tool. Do not edit!
// AST classes for expr
namespace Eleu.Ast;

public abstract class Expr : ExprStmtBase {

  public interface Visitor<R> {
    R VisitAssignExpr(Assign expr);
    R VisitBinaryExpr(Binary expr);
    R VisitCallExpr(Call expr);
    R VisitGetExpr(Get expr);
    R VisitGroupingExpr(Grouping expr);
    R VisitLiteralExpr(Literal expr);
    R VisitLogicalExpr(Logical expr);
    R VisitSetExpr(Set expr);
    R VisitSuperExpr(Super expr);
    R VisitThisExpr(This expr);
    R VisitUnaryExpr(Unary expr);
    R VisitVariableExpr(Variable expr);
  }

  public abstract R Accept<R>(Visitor<R> visitor);

  // Nested Expr classes here...
  // expr-assign
  public class Assign : Expr {
    public readonly string Name;
    public readonly Expr Value;

    internal Assign(string Name, Expr Value) {
      this.Name = Name;
      this.Value = Value;
    }

    public override R Accept<R>(Visitor<R> visitor) {
      return visitor.VisitAssignExpr(this);
    }
  }
  // expr-binary
  public class Binary : Expr {
    public readonly Expr Left;
    public readonly Token Op;
    public readonly Expr Right;

    internal Binary(Expr Left, Token Op, Expr Right) {
      this.Left = Left;
      this.Op = Op;
      this.Right = Right;
    }

    public override R Accept<R>(Visitor<R> visitor) {
      return visitor.VisitBinaryExpr(this);
    }
  }
  // expr-call
  public class Call : Expr {
    public readonly Expr Callee;
    public readonly string? Method;
    public readonly bool CallSuper;
    public readonly List<Expr> Arguments;

    internal Call(Expr Callee,
          string? Method,
          bool CallSuper,
          List<Expr> Arguments) {
      this.Callee = Callee;
      this.Method = Method;
      this.CallSuper = CallSuper;
      this.Arguments = Arguments;
    }

    public override R Accept<R>(Visitor<R> visitor) {
      return visitor.VisitCallExpr(this);
    }
  }
  // expr-get
  public class Get : Expr {
    public readonly Expr Obj;
    public readonly string Name;

    internal Get(Expr Obj, string Name) {
      this.Obj = Obj;
      this.Name = Name;
    }

    public override R Accept<R>(Visitor<R> visitor) {
      return visitor.VisitGetExpr(this);
    }
  }
  // expr-grouping
  public class Grouping : Expr {
    public readonly Expr Expression;

    internal Grouping(Expr Expression) {
      this.Expression = Expression;
    }

    public override R Accept<R>(Visitor<R> visitor) {
      return visitor.VisitGroupingExpr(this);
    }
  }
  // expr-literal
  public class Literal : Expr {
    public readonly object? Value;

    internal Literal(object? Value) {
      this.Value = Value;
    }

    public override R Accept<R>(Visitor<R> visitor) {
      return visitor.VisitLiteralExpr(this);
    }
  }
  // expr-logical
  public class Logical : Expr {
    public readonly Expr Left;
    public readonly Token Op;
    public readonly Expr Right;

    internal Logical(Expr Left, Token Op, Expr Right) {
      this.Left = Left;
      this.Op = Op;
      this.Right = Right;
    }

    public override R Accept<R>(Visitor<R> visitor) {
      return visitor.VisitLogicalExpr(this);
    }
  }
  // expr-set
  public class Set : Expr {
    public readonly Expr Obj;
    public readonly string Name;
    public readonly Expr Value;

    internal Set(Expr Obj, string Name, Expr Value) {
      this.Obj = Obj;
      this.Name = Name;
      this.Value = Value;
    }

    public override R Accept<R>(Visitor<R> visitor) {
      return visitor.VisitSetExpr(this);
    }
  }
  // expr-super
  public class Super : Expr {
    public readonly string Keyword;
    public readonly string Method;

    internal Super(string Keyword, string Method) {
      this.Keyword = Keyword;
      this.Method = Method;
    }

    public override R Accept<R>(Visitor<R> visitor) {
      return visitor.VisitSuperExpr(this);
    }
  }
  // expr-this
  public class This : Expr {
    public readonly string Keyword;

    internal This(string Keyword) {
      this.Keyword = Keyword;
    }

    public override R Accept<R>(Visitor<R> visitor) {
      return visitor.VisitThisExpr(this);
    }
  }
  // expr-unary
  public class Unary : Expr {
    public readonly Token Op;
    public readonly Expr Right;

    internal Unary(Token Op, Expr Right) {
      this.Op = Op;
      this.Right = Right;
    }

    public override R Accept<R>(Visitor<R> visitor) {
      return visitor.VisitUnaryExpr(this);
    }
  }
  // expr-variable
  public class Variable : Expr {
    public readonly string Name;

    internal Variable(string Name) {
      this.Name = Name;
    }

    public override R Accept<R>(Visitor<R> visitor) {
      return visitor.VisitVariableExpr(this);
    }
  }
}
